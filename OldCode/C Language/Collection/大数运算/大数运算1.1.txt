/*
=======================================================================================================================
Name:		 counter.c
Author:		 star_cluster
Description: 利用数组方式进行大数的运算(正整数范围)
=======================================================================================================================
*/
#define _CRT_SECURE_NO_DEPRECATE//关掉scanf安全性检查
#pragma warning(disable:4996)//关掉getch()的安全检查
#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>
#include <windows.h>


typedef struct OPERATION//定义一个结构体,存放运算数据
{
	char sign;//运算符号
	int *first;//第一个数
	int *second;//第二个数
	int *result;//运算结果
	int flen;//第一个数的长度
	int slen;//第二个数的长度
	int len;//运算结果的长度
}OPERATION;


void getnum(OPERATION *num);//输入函数,用于输入需要计算的式子,并返回式子的符号
void control(OPERATION *num);//控制函数,用于判断运算类型并进行处理
void sort(int *num, int len);//排序函数,用于对运算结果进行排序,使之按照正常顺序存放
int compare(OPERATION *num);//比较函数,比较输入的两个数的大小
void addition(OPERATION *num);//加法运算
void subtraction(OPERATION *num);//减法运算
void difference(OPERATION *num);//计算第一个数减去第二个数的结果
void multiplication(OPERATION *num);//乘法运算
void division(OPERATION *num);//除法运算
void factorial(OPERATION *num);//阶乘运算
void putnum(OPERATION *num);//输出函数,用于输出等式

static clock_t star = 0, finish = 0;

int main(void)
{
	OPERATION num = { '\0', NULL, NULL, NULL, 0, 0, 0 };
	printf("请输入正整数范围内的运算式(须指定运算符号,并以等号结尾):\n");
	getnum(&num);
	printf("运算结果为:\n");
	putnum(&num);
	printf("运算结果的长度为:%d位数.\n", num.len);
	printf("The program running time of %ld milliseconds, %.5lf second.\n", finish - star, (double)((finish - star) / 1000.0));
	system("pause");
	return 0;
}


//输入函数,用于输入需要计算的式子
void getnum(OPERATION *num)
{
	int i = 0;
	char temp = '\0';//temp是输入时中间变量
	num->sign = '\0', num->first = NULL, num->second = NULL, num->result = NULL, num->flen = 0, num->slen = 0;
	do
	{
		scanf(" %c", &temp);
		if (temp == 33 || temp == 43 || temp == 45 || temp == 42 || temp == 47)//加减乘除的ascii码分别为43,45,42,47
		{
			num->sign = temp;//以加减乘除运算符作为输入完毕的标志并记录在sign中
			break;
		}
		else
		{
			if (temp > 57 || temp < 48)//如果输入非法数据则跳过
				continue;
			num->first = (int *)realloc(num->first, ++num->flen*sizeof(int));//改变第一个数的大小,使之恰好放入用户输入的数
			num->first[i] = temp - 48;//由于temp是以字符形式读取用户输入的数,所以要减去0的ascii码后才能得到正确的整型数据
		}
	} while (++i);//在此实现i的变化
	i = 0;//重新计算下标号
	do
	{
		scanf(" %c", &temp);
		if (temp == 61 || temp == 10)//等号的ascii码为61
		{
			break;//以等号作为输入终止的标志
		}
		else
		{
			if (temp > 57 || temp < 48)//如果输入非法数据则跳过
				continue;
			num->second = (int *)realloc(num->second, ++num->slen*sizeof(int));//改变第二个数的大小,使之恰好放入用户输入的数
			num->second[i] = temp - 48;//由于temp是以字符形式读取用户输入的数,所以要减去0的ascii码(48)后才能得到正确的整型数据
		}
	} while (++i);
	control(num);//通过控制函数进行计算
}


//控制函数,用于判断运算类型并进行处理
void control(OPERATION *num)
{
	star = clock();
	if (num->first == NULL)
	{
		printf("不支持负数运算!按任意键退出.\n");
		getch();
		exit(1);
	}
	else
	{

		switch (num->sign)
		{
		case '+':
			addition(num);//加法
			break;
		case '-':
			subtraction(num);//减法
			break;
		case '*':
			multiplication(num);//乘法
			break;
		case '/':
			division(num);//除法
			break;
		case '!':
			if (num->first[0] < 0)
			{
				printf("负数没有阶乘!");
			}
			else
				factorial(num);//阶乘运算
			break;
		default:
			printf("不支持的运算符!\n");
			break;
		}
	}
	sort(num->result, num->len);//进行排序
	finish = clock();
}


//排序函数,用于对运算结果进行排序,使之按照正常顺序存放
void sort(int *num, int len)
{
	int i = 0, j = 0, temp = 0;
	for (i = 0, j = len - 1; i < j; ++i, --j)
	{
		temp = num[i];
		num[i] = num[j];
		num[j] = temp;
	}
}


//比较函数,比较输入的两个数的大小,返回1表示第一个数大于第二个数,0则相反,-1表示两数相等
int compare(int *first,int flen,int *second,int slen)
{
	int i = 0, j = 0, big = 0;//i为下标号,big记录大小信息
	if (flen > slen)//检查第一个数与第二个数的大小关系,1表示第一个数大于第二个数,0则相反,-1表示两数相等
		big = 1;
	else
	{
		if (flen < slen)
			big = 0;
		else
		{
			for (i = 0, j = 0; i<flen; i++, j++)//如果被减数与减数长度相等,则从高位数开始逐位判断
			{
				if (first[i] > second[j])
				{
					big = 1;
					break;
				}
				else
				{
					if (first[i] < second[j])
					{
						big = 0;
						break;
					}
					else
					{
						big = -1;
						continue;
					}
				}
			}
		}
	}
	return big;
}


//加法运算
void addition(OPERATION *num)
{
	int i = 0, j = 0, k = 0;//i,j,k为下标号变量
	int carry = 0, temp = 0;//carry是进位数,temp是用于调整num->result顺序的中间变量
	for (i = num->flen - 1, j = num->slen - 1, k = 0; ((i > j) ? i : j) >= 0; i--, j--, k++)//此处i,j为两个运算数的下标,k为和数下标
	{
		num->result = (int *)realloc(num->result, ++num->len *sizeof(int));//改变num->result的大小,使之能够容纳运算结果
		if (i < 0 || j < 0)//如果两个数中的一个数已经加完了,那么加完都那个数不继续参与运算
		{
			if (i < 0)
			{
				num->result[k] = (num->second[j] + carry) % 10;//将未加完的数与进位数继续进行运算
				carry = (num->second[j] + carry) / 10;
			}
			else
			{
				num->result[k] = (num->first[i] + carry) % 10;//同上
				carry = (num->first[i] + carry) / 10;
			}
		}
		else
		{
			num->result[k] = (num->first[i] + num->second[j] + carry) % 10;//求出相加后的数
			carry = (num->first[i] + num->second[j] + carry) / 10;//记录相加后的进位数
		}
		if ((((i > j) ? i : j) == 0) && carry != 0)//如果输入的数中长的那位数已经加到了最前一位,但还需要进位,则执行此语句
		{
			num->result = (int *)realloc(num->result, ++num->len*sizeof(int));//改变num->result的大小,使之能够容纳运算结果
			num->result[num->len - 1] = carry;
		}
	}
}


//减法运算
void subtraction(OPERATION *num)
{
	int i = 0, j = 0, k = 0;//i,j,k为下标号变量
	int temp = 0, big = 0, *temporary = NULL;//temp为调整num->result顺序和计算小数减大数的整型中间变量,temporary是计算小数减大数的指针中间变量,big判断减数与被减数的大小关系
	big = compare(num->first,num->flen,num->second,num->slen);//得出大小信息
	switch (big)
	{
	case -1:
		//如果被减数等于减数则结果为0
		num->result = (int *)malloc(++num->len*sizeof(int));//运算结果为0,只需要一个int型内存单位
		num->result[0] = 0;
		break;
	case 1:
		//被减数大于减数
		difference(num);//直接计算差值
		break;
	case 0:
		//减数大于被减数的情况

		//将减数和被减数互换
		temporary = num->first;
		num->first = num->second;
		num->second = temporary;
		temp = num->flen;
		num->flen = num->slen;
		num->slen = temp;

		difference(num);//调用函数计算差值

		//将减数和被减数换回来
		temporary = num->first;
		num->first = num->second;
		num->second = temporary;
		temp = num->flen;
		num->flen = num->slen;
		num->slen = temp;

		//小数减大数,结果为负,最前一位数加上负号
		num->result[num->len - 1] *= -1;
	}
}


//计算第一个数减去第二个数的差值
void difference(OPERATION *num)
{
	int i = 0, j = 0, k = 0;//i,j,k为下标号变量
	int carry = 0;// carry为进位数
	for (i = num->flen - 1, j = num->slen - 1, k = 0; i >= 0; i--, j--, k++)//与加法类似,i,j为运算数的下标号,k为运算结果下标号
	{
		num->result = (int *)realloc(num->result, ++num->len*sizeof(int));//使num->result能放运算结果
		if (j < 0)//当减数已经减完了则只需要算出实际的被减数(即num->first[i]+carry)
		{
			if (carry + num->first[i] < 0)//被减数实际值小于0时
			{
				num->result[k] = (carry + num->first[i] + 10) % 10;//加上10以保证num->first[i]为正
				carry = -1;
			}
			else//被减数实际值大于0
			{
				num->result[k] = (carry + num->first[i]) % 10;
				carry = 0;
			}
		}
		else//减数未减完
		{
			if (num->first[i] + carry < num->second[j])//如果该位数的被减数小于减数
			{
				num->result[k] = ((num->first[i] + carry + 10) - num->second[j]) % 10;//计算差,+10和%10保证差在0-9的范围
				carry = -1;//此时需要向高位数借1
			}
			else//该位数的被减数大于减数则直接相减
			{
				num->result[k] = (num->first[i] + carry) - num->second[j];
				carry = 0;
			}
		}
	}

	//将减完之后的运算结果中多余的0去掉
	for (k = num->len - 1; k >= 0; k--)
	{
		if (num->result[k] == 0)
		{
			num->result = (int *)realloc(num->result, --num->len*sizeof(int));
		}
		else
			break;//只要碰到一个不为0的数则说明剩下的都是有效数字了,则退出
	}
}


//乘法运算
void multiplication(OPERATION *num)
{
	int i = 0, j = 0, k = 0;//i,j,k为下标号变量
	int carry = 0, temp = 0;// carry为进位数,temp为累加时的临时变量

	for (j = num->slen - 1; j >= 0; --j)//按照乘法规则从最后一位算起
	{
		for (i = num->flen - 1, k = num->slen - 1 - j, carry = 0, temp = 0; i >= 0; --i, k++)//i为第一位数的下标号,k为结果的下标号,k的初值为积开始的下标
		{
			num->result = (int *)realloc(num->result, (num->len > (k + 1) ? num->len : (k + 1))*sizeof(int));//将result长度调整为合适长度
			if (num->result[k]<0 || num->result[k]>9)//判断是否有效数字,没有的话则置0
			{
				num->result[k] = 0;
			}
			temp = num->result[k] + num->first[i] * num->second[j] + carry;
			num->result[k] = temp % 10;//取出个位数
			carry = temp / 10;//取出进位数
			if (i == 0 && carry != 0)//如果已经算完但是还需进位
			{
				num->result = (int *)realloc(num->result, (++k + 1)*sizeof(int));
				num->result[k] = carry;
			}
		}
		num->len = k;//令num->len正确记录result的长度
	}
}


//除法运算
void division(OPERATION *num)
{
	OPERATION temp = { '-', NULL, NULL, NULL, 0, 0, 0 };//运算减法的临时变量
	int i = 0, k = 0;//循环变量i,num->result下标号变量k
	int end = 1;//结束符号

	num->result = (int *)malloc(++num->len*sizeof(int));//为运算结果申请内存
	num->result[0] = 0;//初始化

	//复制num的值
	temp.first = (int *)malloc(num->flen*sizeof(int));
	for (temp.flen = num->flen, i = 0; i < num->flen; i++)
		temp.first[i] = num->first[i];
	temp.second = (int *)malloc(num->slen*sizeof(int));
	for (temp.slen = num->slen, i = 0; i < num->slen; i++)
		temp.second[i] = num->second[i];

	for (; end;)
	{
		switch (compare(temp.first, temp.flen, temp.second, temp.slen))//判断两数大小情况并执行相应操作,0为小于,-1为相等,1为大于
		{
		case 0:
			end = 0;
			break;
		case -1:
			++num->result[0];//商加一
			if (num->result[0] > 9)//纠正商
			{
				num->result[0] = 0;
				for (k = 1; k < num->len; k++)
				{
					if (k > num->len - 1)//数组不够长时
					{
						num->result = (int *)realloc(num->result, ++num->len*sizeof(int));
						num->result[num->len - 1] = 0;
					}
					++num->result[k];
					if (num->result[k] <= 9)
						break;
					else
						num->result[k] = 0;
				}
			}
			end = 0;
			break;
		case 1:
			difference(&temp);//相减
			sort(temp.result, temp.len);//调整顺序
			//相减之后将结果作为被减数
			temp.flen = temp.len;
			temp.len = 0;
			free(temp.first);
			temp.first = temp.result;
			temp.result = NULL;
			++num->result[0];//商加一
			if (num->result[0] > 9)//纠正商
			{
				num->result[0] = 0;
				for (k = 1;; k++)
				{
					if (k > num->len - 1)//数组不够长时
					{
						num->result = (int *)realloc(num->result, ++num->len*sizeof(int));
						num->result[num->len - 1] = 0;
					}
					++num->result[k];
					if (num->result[k] <= 9)
						break;
					else
						num->result[k] = 0;
				}
			}
			break;
		}
	}
	free(temp.first);
	free(temp.second);
	if (temp.result != NULL)
		free(temp.result);
}


//阶乘函数
void factorial(OPERATION *num)
{
	OPERATION temp = { '*', NULL, NULL, NULL, 0, 0, 0 };//临时变量,second代表因数,result是结果,first是前一个因数的阶乘
	int i = 0, j = 0;//i为因数(second)的下标号,j为因数进位时的循环变量

	if (num->flen == 1 && (num->first[0] == 0 || num->first[0] == 1))
	{
		num->result = (int *)malloc(++num->len*sizeof(int));//给result申请一个长度的内存
		num->result[0] = 1;//0和1的阶乘都为1
	}
	else
	{
		//因数从3开始计算,而结果从2开始,因为若输入的是2,则2的阶乘仍为2
		temp.result = (int *)malloc(++temp.len*sizeof(int)); temp.result[0] = 2;
		temp.second = (int *)malloc(++temp.slen*sizeof(int)); temp.second[0] = 3;

		for (; compare(num->first, num->flen, temp.second, temp.slen) != 0;)//循环条件为因数小于等于输入的数
		{
			free(temp.first);
			temp.first = temp.result; temp.flen = temp.len;//将结果(前一个数的阶乘)作为被乘数
			temp.result = NULL; temp.len = 0;//使result不指向任何内存
			multiplication(&temp);//乘法计算
			sort(temp.result, temp.len);//将结果顺序纠正
			for (++temp.second[temp.slen - 1], i = temp.slen - 1; temp.second[i] == 10; --i)//使因数自增1
			{
				temp.second[i] = 0;
				if (i == 0)//如果长度不足则改变temp.second的大小
				{
					temp.second = (int *)realloc(temp.second, ++temp.slen*sizeof(int));
					for (j = temp.slen - 1; j > 0; --j)//将数往后移
						temp.second[j] = temp.second[j - 1];
					temp.second[0] = 1;
				}
				else
					++temp.second[i - 1];
			}
		}
		num->result = temp.result; num->len = temp.len;//最后结果即所求结果
		sort(temp.result, temp.len);//由于在控制函数中还有一次sort排序,而循环结束后result的顺序已经是正序,因此要把它转为逆序
		//释放内存
		free(temp.first);
		free(temp.second);
	}
}


//输出函数,用于输出等式
void putnum(OPERATION *num)
{
	int i = 0;
	for (i = 0; i < num->flen; i++)//输出第一个数
	{
		printf("%d", num->first[i]);
	}
	printf(" %c ", num->sign);//输出运算符号
	for (i = 0; i < num->slen; i++)//输出第二个数
	{
		printf("%d", num->second[i]);
	}
	printf("  =  ");//输出等号
	for (i = 0; i < num->len; i++)//输出运算结果
	{
		printf("%d", num->result[i]);
	}
	printf("\n");//换行

	//释放动态分配的内存
	free(num->first);
	free(num->second);
	free(num->result);
}